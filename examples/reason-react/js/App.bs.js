// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./Utils.bs.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Constant = require("./Constant.bs.js");
var TodoItem = require("./TodoItem.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var TodoFooter = require("./TodoFooter.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");

var initialState_000 = /* todos */Utils.Store.getTodos(/* () */0);

var initialState = /* record */[
  initialState_000,
  /* editing */undefined
];

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* CancelEditTodo */0) {
      return /* record */[
              /* todos */state[/* todos */0],
              /* editing */undefined
            ];
    } else {
      var newTodos = Belt_Array.keep(state[/* todos */0], (function (todo) {
              return !todo[/* completed */2];
            }));
      Utils.Store.saveTodos(newTodos);
      return /* record */[
              /* todos */newTodos,
              /* editing */state[/* editing */1]
            ];
    }
  } else {
    switch (action.tag | 0) {
      case /* AddTodo */0 :
          var newTodo_000 = /* id */Utils.uuid(/* () */0);
          var newTodo_001 = /* title */Utils.sanatizeTodo(action[0]);
          var newTodo = /* record */[
            newTodo_000,
            newTodo_001,
            /* completed */false
          ];
          var newTodos$1 = $$Array.append(state[/* todos */0], /* array */[newTodo]);
          Utils.Store.saveTodos(newTodos$1);
          return /* record */[
                  /* todos */newTodos$1,
                  /* editing */state[/* editing */1]
                ];
      case /* ToggleTodo */1 :
          var todoId = action[0];
          var newTodos$2 = $$Array.map((function (todo) {
                  var match = todo[/* id */0] === todoId;
                  if (match) {
                    return /* record */[
                            /* id */todo[/* id */0],
                            /* title */todo[/* title */1],
                            /* completed */!todo[/* completed */2]
                          ];
                  } else {
                    return todo;
                  }
                }), state[/* todos */0]);
          Utils.Store.saveTodos(newTodos$2);
          return /* record */[
                  /* todos */newTodos$2,
                  /* editing */state[/* editing */1]
                ];
      case /* EditTodo */2 :
          return /* record */[
                  /* todos */state[/* todos */0],
                  /* editing */action[0]
                ];
      case /* SaveTodo */3 :
          var title = action[1];
          var todoId$1 = action[0];
          var newTodos$3 = $$Array.map((function (todo) {
                  var match = todo[/* id */0] === todoId$1;
                  if (match) {
                    return /* record */[
                            /* id */todo[/* id */0],
                            /* title */title,
                            /* completed */todo[/* completed */2]
                          ];
                  } else {
                    return todo;
                  }
                }), state[/* todos */0]);
          Utils.Store.saveTodos(newTodos$3);
          return /* record */[
                  /* todos */newTodos$3,
                  /* editing */undefined
                ];
      case /* DeleteTodo */4 :
          var todoId$2 = action[0];
          var newTodos$4 = Belt_Array.keep(state[/* todos */0], (function (todo) {
                  return todo[/* id */0] !== todoId$2;
                }));
          Utils.Store.saveTodos(newTodos$4);
          return /* record */[
                  /* todos */newTodos$4,
                  /* editing */state[/* editing */1]
                ];
      case /* ToggleAll */5 :
          var toggle = action[0];
          var newTodos$5 = $$Array.map((function (todo) {
                  return /* record */[
                          /* id */todo[/* id */0],
                          /* title */todo[/* title */1],
                          /* completed */toggle
                        ];
                }), state[/* todos */0]);
          Utils.Store.saveTodos(newTodos$5);
          return /* record */[
                  /* todos */newTodos$5,
                  /* editing */state[/* editing */1]
                ];
      
    }
  }
}

function App(Props) {
  var url = ReasonReactRouter.useUrl(undefined, /* () */0);
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = React.useReducer((function (_oldText, newText) {
          return newText;
        }), "");
  var setText = match$1[1];
  var text = match$1[0];
  var match$2 = url[/* hash */1];
  var nowShowing;
  switch (match$2) {
    case "/active" :
        nowShowing = /* Active */1;
        break;
    case "/completed" :
        nowShowing = /* Completed */2;
        break;
    default:
      nowShowing = /* All */0;
  }
  var todos = Utils.filterTodos(state[/* todos */0], nowShowing);
  var activeTodos = Utils.filterTodos(state[/* todos */0], /* Active */1);
  var hasTodos = state[/* todos */0].length !== 0;
  return React.createElement("div", undefined, React.createElement("header", {
                  className: "header"
                }, React.createElement("h1", undefined, "todos"), React.createElement("input", {
                      className: "new-todo",
                      autoFocus: true,
                      placeholder: "What needs to be done?",
                      type: "text",
                      value: text,
                      onKeyDown: (function ($$event) {
                          if ($$event.keyCode === Constant.enter_key) {
                            Curry._1(dispatch, /* AddTodo */Block.__(0, [text]));
                            return Curry._1(setText, "");
                          } else {
                            return 0;
                          }
                        }),
                      onChange: (function ($$event) {
                          return Curry._1(setText, Utils.valueFromEvent($$event));
                        })
                    })), hasTodos ? React.createElement(React.Fragment, undefined, React.createElement("section", {
                        className: "main"
                      }, React.createElement("input", {
                            className: "toggle-all",
                            id: "toggle-all",
                            checked: activeTodos.length === 0,
                            type: "checkbox",
                            onChange: (function ($$event) {
                                return Curry._1(dispatch, /* ToggleAll */Block.__(5, [Utils.booleanValueFromEvent($$event)]));
                              })
                          }), React.createElement("label", {
                            htmlFor: "toggle-all"
                          }, "Mark all as complete"), React.createElement("ul", {
                            className: "todo-list"
                          }, $$Array.map((function (todo) {
                                  return React.createElement(TodoItem.make, {
                                              todo: todo,
                                              editing: Caml_obj.caml_equal(state[/* editing */1], todo[/* id */0]),
                                              onCancel: (function (param) {
                                                  return Curry._1(dispatch, /* CancelEditTodo */0);
                                                }),
                                              onToggle: (function (param) {
                                                  return Curry._1(dispatch, /* ToggleTodo */Block.__(1, [todo[/* id */0]]));
                                                }),
                                              onDestroy: (function (param) {
                                                  return Curry._1(dispatch, /* DeleteTodo */Block.__(4, [todo[/* id */0]]));
                                                }),
                                              onSave: (function (title) {
                                                  return Curry._1(dispatch, /* SaveTodo */Block.__(3, [
                                                                todo[/* id */0],
                                                                title
                                                              ]));
                                                }),
                                              onEdit: (function (param) {
                                                  return Curry._1(dispatch, /* EditTodo */Block.__(2, [todo[/* id */0]]));
                                                }),
                                              key: todo[/* id */0]
                                            });
                                }), todos))), React.createElement(TodoFooter.make, {
                        count: state[/* todos */0].length,
                        completedCount: Belt_Array.keep(state[/* todos */0], (function (todo) {
                                return todo[/* completed */2];
                              })).length,
                        nowShowing: nowShowing,
                        onClearCompleted: (function (param) {
                            return Curry._1(dispatch, /* ClearCompleted */1);
                          })
                      })) : null);
}

var make = App;

exports.initialState = initialState;
exports.reducer = reducer;
exports.make = make;
/* initialState Not a pure module */
